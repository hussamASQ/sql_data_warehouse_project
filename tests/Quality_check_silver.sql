/*
======================================================================
quality checks
======================================================================
script purpose:
this script performs various quality checks for data consistency, accuracy,
and standardization across the 'silver' schemas. it includes checks for:
-nulls or duplicates primary key
-unwanted spaces in string fields
-data standardization and consistency
-invalid data ranges and orders
-data consistency between related fields.

usage notes:
-run these checks after data loading silver layer
-inverstigate and resolve any discrepancies found during the checks.
***************************************************************************8
*/

SELECT * FROM BRONZE.CRM_CUST_INFO
--BEFORE DO ANY DATA TRANSFORMATION WE HAVE TO GO AND EXPLORE 
--AND IDENTIFY DATA QUALITY ISSUES

--1-CHECK QUALITY..OF THE PRIMARY KEY ..MUST BE UNIQUE AND NOT NULL
SELECT 
CST_ID,
COUNT(*) 
FROM BRONZE.CRM_CUST_INFO
GROUP BY CST_ID
HAVING COUNT(*) > 1 OR CST_ID IS NULL


--CHECK FOR UNWANTED SPACES
SELECT CST_FIRSTNAME
FROM BRONZE.CRM_CUST_INFO
WHERE CST_FIRSTNAME != TRIM(CST_FIRSTNAME);

SELECT CST_LASTNAME
FROM BRONZE.CRM_CUST_INFO 
WHERE CST_LASTNAME != TRIM (CST_LASTNAME)

SELECT CST_GNDR
FROM BRONZE.CRM_CUST_INFO 
WHERE CST_GNDR != TRIM (CST_GNDR)


--EXPECTATION : NO RESULTS
SELECT CST_KEY
FROM BRONZE.CRM_CUST_INFO
WHERE CST_KEY != TRIM(CST_KEY)

--DATA STANDARDIZATION & CONSISTENCY
SELECT DISTINCT CST_GNDR
FROM BRONZE.CRM_CUST_INFO

SELECT DISTINCT CST_MARITAL_STATUS
FROM BRONZE.CRM_CUST_INFO
-----------------------------------------------------
---------------------------------------------------------
--1-CHECK QUALITY..OF THE PRIMARY KEY ..MUST BE UNIQUE AND NOT NULL
SELECT 
CST_ID,
COUNT(*) 
FROM SILVER.CRM_CUST_INFO
GROUP BY CST_ID
HAVING COUNT(*) > 1 OR CST_ID IS NULL

--CHECK FOR UNWANTED SPACES
SELECT CST_FIRSTNAME
FROM SILVER.CRM_CUST_INFO
WHERE CST_FIRSTNAME != TRIM(CST_FIRSTNAME);


 SELECT CST_LASTNAME
FROM SILVER.CRM_CUST_INFO 
WHERE CST_LASTNAME != TRIM (CST_LASTNAME)

SELECT CST_GNDR
FROM SILVER.CRM_CUST_INFO 
WHERE CST_GNDR != TRIM (CST_GNDR)


--EXPECTATION : NO RESULTS
SELECT CST_KEY
FROM SILVER.CRM_CUST_INFO
WHERE CST_KEY != TRIM(CST_KEY)

--DATA STANDARDIZATION & CONSISTENCY
SELECT DISTINCT CST_GNDR
FROM SILVER.CRM_CUST_INFO

SELECT DISTINCT CST_MARITAL_STATUS
FROM SILVER.CRM_CUST_INFO

SELECT COUNT(*) FROM SILVER.CRM_CUST_INFO
--------------------------------------------------------------------------------
------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------
--CHECK FOR NULLS OR DUPLICATES IN PRIMARY KEY IN TABLE BRONZE.CRM_PRD_INFO
--EXCEPTION : NO RESULTS
SELECT 
      PRD_ID,
      COUNT(*)
      FROM BRONZE.CRM_PRD_INFO
GROUP BY PRD_ID
HAVING COUNT(*) > 1 OR PRD_ID IS NULL


--CHECK FOR UNWANTED SPACES
--EXCEPTION: NO RESULTS
SELECT PRD_NM
FROM BRONZE.CRM_PRD_INFO
WHERE PRD_NM !=  TRIM(PRD_NM)

--CHECK FOR NULLS OR NEGATIVE NUMBERS
--EXCEPTION: NO RESULTS
SELECT PRD_COST
FROM BRONZE.CRM_PRD_INFO
WHERE PRD_COST < 0 OR PRD_COST IS NULL

--DATA STANDARDIZITION & CONSISTENCY
SELECT DISTINCT PRD_LINE
FROM BRONZE.CRM_PRD_INFO

--CHECK FOR INVALID DATA ORDERS
--END DATE MUST NOT BE EARLIER THAN THE START DATE
SELECT * FROM BRONZE.CRM_PRD_INFO
WHERE PRD_END_DT < PRD_START_DT
--THE START IS AFTER THE END AND THIS IS A BIG PROBLEM


SELECT 
PRD_ID,
PRD_KEY,
PRD_NM,
PRD_START_DT,
PRD_END_DT,
LEAD(PRD_START_DT) OVER(PARTITION BY PRD_KEY ORDER BY PRD_START_DT ) -1 AS PRD_END_DT_TEST
FROM BRONZE.CRM_PRD_INFO
WHERE PRD_KEY IN ('AC-HE-HL-US50-R','AC-HE-HL-U509')

SELECT 
    PRD_ID,
    PRD_KEY,
    PRD_NM,
    PRD_START_DT,
    PRD_END_DT,
    DATEADD(DAY, -1, LEAD(PRD_START_DT) OVER(PARTITION BY PRD_KEY ORDER BY PRD_START_DT)) AS PRD_END_DT_TEST
FROM BRONZE.CRM_PRD_INFO
WHERE PRD_KEY IN ('AC-HE-HL-US50-R','AC-HE-HL-U509');


IF OBJECT_ID ('SILVER.CRM_PRD_INFO','U') IS NOT NULL
   DROP TABLE SILVER.CRM_PRD_INFO;
CREATE TABLE SILVER.CRM_PRD_INFO(
PRD_ID INT,
CAT_ID NVARCHAR(50),
PRD_KEY NVARCHAR(50),
PRD_NM NVARCHAR(50),
PRD_COST INT,
PRD_LINE NVARCHAR(50),
PRD_START_DT DATE,
PRD_END_DT DATE,
DW_CREATE_DATE DATETIME2 DEFAULT GETDATE()
);


--Quality checks
--check for nulls or duplicates in primary key
--exception: no result

SELECT 
PRD_ID,
COUNT(*)
FROM SILVER.CRM_PRD_INFO
GROUP BY PRD_ID
HAVING COUNT(*) > 1 OR PRD_ID IS NULL

--CHECK FOR UNWANTED SPACES
--EXPECTION: NO RESULTS
SELECT PRD_NM
FROM SILVER.CRM_PRD_INFO
WHERE PRD_NM != TRIM(PRD_NM)

--CHECK FOR NULLS OR NEGATIVE NUMBERS
--EXCEPTION : NO RESULTS
SELECT PRD_COST
FROM SILVER.CRM_PRD_INFO
WHERE PRD_COST < 0 OR PRD_COST IS NULL

--DATA STANDARDIZATION & CONSISTENCY
SELECT DISTINCT PRD_LINE
FROM SILVER.CRM_PRD_INFO

--CHECK THE INVALID DATA ORDERS
SELECT * FROM SILVER.CRM_PRD_INFO 
WHERE PRD_END_DT < PRD_START_DT


SELECT * FROM SILVER.CRM_PRD_INFO
----------------------------------------------------------------------
------------------------------------------------------------------------
-- SALES_DETAILS
SELECT 
       [SLS_PRD_KEY]
      ,[SLS_CUST_ID]
      ,[SLS_ORDER_DT]
      ,[SLS_SHIP_DT]
      ,[SLS_DUE_DT]
      ,[SLS_SALES]
      ,[SLS_QUANTITY]
      ,[SLS_PRICE]
  FROM [DATAWAREHOUSE].[BRONZE].[CRM_SALES_DETAILS]
  WHERE SLS_ORD_NUM != TRIM(SLS_ORD_NUM)

  --CHECK FOR INVALID DATES
  SELECT 
  SLS_ORDER_DT
  FROM  BRONZE.CRM_SALES_DETAILS
  WHERE SLS_ORDER_DT < 0

  SELECT 
  NULLIF(SLS_ORDER_DT,0) SLS_ORDER_DT
  FROM  BRONZE.CRM_SALES_DETAILS
  WHERE SLS_ORDER_DT <= 0

  SELECT 
  NULLIF(SLS_ORDER_DT,0) SLS_ORDER_DT
  FROM  BRONZE.CRM_SALES_DETAILS
  WHERE SLS_ORDER_DT <= 0 OR LEN(SLS_ORDER_DT) != 8 OR SLS_ORDER_DT > 20500101

  SELECT 
  NULLIF(SLS_ORDER_DT,0) SLS_ORDER_DT
  FROM  BRONZE.CRM_SALES_DETAILS
  WHERE SLS_ORDER_DT > 20500101 OR SLS_ORDER_DT < 19000101


    SELECT 
  NULLIF(SLS_ORDER_DT,0) SLS_ORDER_DT
  FROM BRONZE.CRM_SALES_DETAILS
  WHERE SLS_ORDER_DT <= 0
  OR LEN (SLS_ORDER_DT) != 8
  OR SLS_ORDER_DT > 202500101
  OR SLS_ORDER_DT < 19000101

  SELECT 
  NULLIF(SLS_SHIP_DT,0) SLS_SHIP_DT
  FROM BRONZE.CRM_SALES_DETAILS
  WHERE SLS_SHIP_DT <= 0
  OR LEN (SLS_SHIP_DT) != 8
  OR SLS_SHIP_DT > 202500101
  OR SLS_SHIP_DT < 19000101

  SELECT 
  NULLIF(SLS_DUE_DT,0) SLS_DUE_DT
  FROM BRONZE.CRM_SALES_DETAILS
  WHERE SLS_DUE_DT <= 0
  OR LEN (SLS_DUE_DT) != 8
  OR SLS_DUE_DT > 202500101
  OR SLS_DUE_DT < 19000101
  ------------------------------------------------------
  -------------------------------------------------------
  --CHECK FOR INVALID DATA ORDERS
  SELECT * 
  FROM BRONZE.CRM_SALES_DETAILS
  WHERE SLS_ORDER_DT > SLS_SHIP_DT OR SLS_ORDER_DT > SLS_DUE_DT

  --CHECK DATA CONSISTENCY BETWEEN SALES, QUANTITIVE ,AND PRICE
  -- >>  SALES=QUANTITY * PRICE
  -- >> VALUES MUST NOT BE  NULL, ZERO, OR NEGATIVE

  SELECT DISTINCT
  SLS_SALES,
  SLS_QUANTITY,
  SLS_PRICE
  FROM BRONZE.CRM_SALES_DETAILS
  WHERE SLS_SALES != SLS_QUANTITY * SLS_PRICE
  OR SLS_SALES IS NULL OR SLS_QUANTITY IS NULL OR SLS_PRICE IS NULL
  OR SLS_SALES <= 0 OR SLS_QUANTITY <= 0 OR SLS_PRICE <= 0
  ORDER BY SLS_SALES, SLS_QUANTITY, SLS_PRICE


  IF OBJECT_ID ('SILVER.CRM_SALES_DETAILS','U') IS NOT NULL
   DROP TABLE SILVER.CRM_SALES_DETAILS;
CREATE TABLE SILVER.CRM_SALES_DETAILS(
SLS_ORD_NUM NVARCHAR(50),
SLS_PRD_KEY NVARCHAR(50),
SLS_CUST_ID INT,
SLS_ORDER_DT DATE,
SLS_SHIP_DT DATE,
SLS_DUE_DT DATE,
SLS_SALES INT,
SLS_QUANTITY INT,
SLS_PRICE INT,
DW_CREATE_DATE DATETIME2 DEFAULT GETDATE()
);
---------------------------------------------------------
--CHECK 
SELECT * FROM SILVER.CRM_SALES_DETAILS
WHERE SLS_ORDER_DT > SLS_SHIP_DT OR SLS_ORDER_DT > SLS_DUE_DT

  SELECT DISTINCT
  SLS_SALES,
  SLS_QUANTITY,
  SLS_PRICE
  FROM [SILVER].[CRM_SALES_DETAILS]
  WHERE SLS_SALES != SLS_QUANTITY * SLS_PRICE
  OR SLS_SALES IS NULL OR SLS_QUANTITY IS NULL OR SLS_PRICE IS NULL
  OR SLS_SALES <= 0 OR SLS_QUANTITY <= 0 OR SLS_PRICE <= 0
  ORDER BY SLS_SALES, SLS_QUANTITY, SLS_PRICE

  SELECT * FROM SILVER.CRM_SALES_DETAILS
  -------------------------------------------------------
  -------------------------------------------------------
  SELECT CID,BDATE,GEN FROM BRONZE.ERP_CUST_AZ12

  SELECT * FROM SILVER.CRM_CUST_INFO

    SELECT CID,BDATE,GEN FROM BRONZE.ERP_CUST_AZ12
    WHERE CID LIKE '%AW00011000%'




--CHECK
SELECT 
      CID,
      CASE WHEN CID LIKE 'NAS%' THEN SUBSTRING(CID,4,LEN(CID))
      ELSE CID
END CID,
BDATE,
GEN
FROM BRONZE.ERP_CUST_AZ12
WHERE CASE WHEN CID LIKE 'NAS%' THEN SUBSTRING (CID, 4,LEN(CID))
      ELSE CID
END NOT IN (SELECT DISTINCT CST_KEY FROM SILVER.CRM_CUST_INFO)


--IDENTIFI OUT_OF_RANGE DATES
SELECT DISTINCT 
BDATE
FROM BRONZE.ERP_CUST_AZ12
WHERE BDATE < '1924-01-01' OR BDATE > GETDATE()
--THERE IS BIRTH DATES IN THE FUTURE

--DATA STANDARDIZATION & CONSISTENCY
SELECT DISTINCT GEN
FROM BRONZE.ERP_CUST_AZ12



--CHECK DATA QUALITY
SELECT CID,BDATE,GEN FROM SILVER.ERP_CUST_AZ12
    WHERE CID LIKE '%AW00011000%'


SELECT DISTINCT 
BDATE
FROM SILVER.ERP_CUST_AZ12
WHERE BDATE < '1924-01-01' OR BDATE > GETDATE()

SELECT DISTINCT GEN
FROM SILVER.ERP_CUST_AZ12

SELECT * FROM SILVER.ERP_CUST_AZ12
----------------------------------------------------
----------------------------------------------------
SELECT CID,CNTRY
FROM BRONZE.ERP_LOC_A101;

SELECT CST_KEY FROM SILVER.CRM_CUST_INFO

SELECT 
REPLACE(CID,'-','') AS CID,
CNTRY
FROM BRONZE.ERP_LOC_A101

--CHECK
SELECT REPLACE(CID,'-','') CID,
CNTRY
FROM BRONZE.ERP_LOC_A101 WHERE REPLACE (CID,'-','') NOT IN 
(SELECT CST_KEY FROM SILVER.CRM_CUST_INFO)

--DATA STANDARDIZIATION & CONSISTENCY
SELECT DISTINCT CNTRY
FROM BRONZE.ERP_LOC_A101
ORDER BY CNTRY

SELECT 
REPLACE(CID,'-','') AS CID,
CASE WHEN TRIM (CNTRY) = 'DE' THEN 'GERMANY'
     WHEN TRIM (CNTRY) IN ('US' , 'USA' ) THEN 'United States'
     WHEN TRIM (CNTRY) = '' OR CNTRY IS NULL THEN 'N/A'
     ELSE TRIM(CNTRY)
END AS CNTRY
FROM BRONZE.ERP_LOC_A101

--CHECK 
SELECT DISTINCT
CNTRY,
CASE WHEN TRIM (CNTRY) = 'DE' THEN 'GERMANY'
     WHEN TRIM (CNTRY) IN ('US' , 'USA' ) THEN 'United States'
     WHEN TRIM (CNTRY) = '' OR CNTRY IS NULL THEN 'N/A'
     ELSE TRIM(CNTRY)
END AS CNTRY
FROM BRONZE.ERP_LOC_A101

--CHECK
SELECT DISTINCT CNTRY 
FROM SILVER.ERP_LOC_A101
ORDER BY CNTRY;

SELECT * FROM SILVER.ERP_LOC_A101
-----------------------------------------------------
-----------------------------------------------------
SELECT 
ID,
CAT,
SUBCAT,
MAINTENANCE
FROM BRONZE.ERP_PX_CAT_G1V2

--CHECK FOR UNWANTED SPACES
SELECT *
FROM BRONZE.ERP_PX_CAT_G1V2
WHERE CAT != TRIM(CAT) OR SUBCAT != TRIM(SUBCAT) OR MAINTENANCE != TRIM(MAINTENANCE)

--DATA STANDARDIZATION & CONSISTENCY
SELECT DISTINCT SUBCAT
FROM [BRONZE].[ERP_PX_CAT_G1V2]

SELECT DISTINCT CAT
FROM [BRONZE].[ERP_PX_CAT_G1V2]

SELECT DISTINCT MAINTENANCE
FROM [BRONZE].[ERP_PX_CAT_G1V2]


SELECT * FROM [SILVER].[ERP_PX_CAT_G1V2]
----------------------------------------------------------------------------------
----------------------------------------------------------------------------------
EXEC SILVER.LOAD_SILVER
EXEC BRONZE.LOAD_BRONZE

